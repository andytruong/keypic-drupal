<?php
/**
 * @file keypic_comment.module
 */

/**
 * Implements hook_form_alter().
 */
function keypic_comment_form_alter(&$form, $form_state, $form_id) {
  // Captcha is already included
  if (isset($form['captcha'])) return;

  // Detect comment form
  $is_comment = strpos($form['#form-id'], 'comment-form') === 0;
  if (!$is_comment) return;

  $form['keypic_comment'] = array(
    '#type' => 'captcha',
    '#captcha_type' => 'keypic/KeyPic',
    '#weight' => 100,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function keypic_comment_form_comment_admin_overview_alter(&$form, $form_state) {
  $comment_ids = array_keys($form['comments']['#options']);

  foreach (keypic_comment_load_points($comment_ids) as $cid => $point) {
    $alter = TRUE;
    $form['comments']['#options'][$cid]['keypic']  = $point . '%';
    $form['comments']['#options'][$cid]['keypic'] .= ' (' .keypic_get_status_info($point) . ')';
  }

  if (!empty($alter)) {
    $form['comments']['#header']['keypic']['data'] = t('Percent of span - by KeyPic');
  }
}

/**
 * Load Keypic spam points of comments by comment IDs.
 */
function keypic_comment_load_points($comment_ids = array()) {
  if (empty($comment_ids)) {
    return array();
  }

  $select = db_select('keypic_comment', 'kpc');
  $select->condition('kpc.cid', $comment_ids);
  $select->fields('kpc', array('cid', 'point'));
  return $select->execute()->fetchAllKeyed();
}

/**
 * Implements hook_keypic_validate().
 */
function keypic_comment_keypic_validate($response = 0, $token = '', $form = array(), $form_state = array()) {
  static $keypic_spam_point = 0;
  static $keypic_spam_token = '';

  // Detect comment form
  if (!empty($form_state)) {
    $is_comment = $form_state['build_info']['base_form_id'] === 'comment_form';
    if (!$is_comment) return;
  }

  if (!empty($response)) {
    $keypic_spam_point = $response;
  }

  return array($keypic_spam_point, $keypic_spam_token);
}

/**
 * Implemens hook_comment_insert().
 */
function keypic_comment_insert($comment) {
  if (!$keypic_spam_point = keypic_comment_keypic_validate()) return;

  $record = new stdClass();
  $record->entity_type = 'comment';
  $record->entity_id = $comment->cid;
  $record->token = $keypic_spam_point;
  $record->point = $keypic_spam_point;
  drupal_write_record('keypic_comment', $record);
}

/**
 * Implements hook_comment_delete().
 */
function keypic_comment_comment_delete($comment) {
  db_delete('keypic_comment')
    ->condition('entity_type', 'comment')
    ->condition('entity_id', $comment->cid)
    ->execute();
}
